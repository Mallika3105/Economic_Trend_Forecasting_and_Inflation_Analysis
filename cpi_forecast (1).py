# -*- coding: utf-8 -*-
"""CPI_forecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sodWB-3OYfwCL6UToreE0InwydyhpB6J
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
!pip install fredapi
import fredapi as fd
import plotly.express as px

# Establishing the connection
fred = fd.Fred(api_key='671f2e0c08f809cc7247457e1776bbb7')

data = fred.search('Consumer Price Index for All Urban Consumers: All Items in U.S. City Average')
data.head(10)

data['title'][0]

#Extracting all data points
cpi= fred.get_series('CPIAUCSL') #This retrieves the Consumer Price Index (CPI) for All Urban Consumers (CPIAUCSL) from the FRED (Federal Reserve Economic Data) API. This returns a time series (Pandas Series) with dates as the index and CPI values as the data.
cpi.name ='values' # This assigns the name 'values' to the Pandas Series, which helps in labeling when converting it to a DataFrame.
cpi

df = pd.DataFrame(cpi).reset_index()
df
#The command converts cpi into a Pandas DataFrame and resets its index. If cpi had a custom index (like years or dates), reset_index() moves it into a new column and replaces it with a default integer index. Finally, df displays the DataFrame

df2 = df[df['index']>'1989-12-01'] #This command filters df to keep only rows from 1990
df2

# Drawing line plot of this data
fig = px.line(df2, x='index', y='values', title = 'CPI Avg. 1990-2025')
fig.show()

#Changing the column names
df2 = df2.rename(columns={'index': 'ds', 'values': 'y'})
df2

from prophet import Prophet
ml = Prophet() #This creates an instance of the Prophet model with default settings.
ml.fit(df2) #Trains the model on df2

#Creating Future dataframes
future = ml.make_future_dataframe(periods =12, freq = 'MS')

future.tail()

result = ml.predict(future)
result

result[['ds', 'yhat', 'yhat_lower', 'yhat_upper']]

fig = ml.plot(result)

"""The black dotted lines are actual values from the dataset and the blue solid line is Predicted value(yhat). The shaded blue is the range between yhat_lower and yhat_upper"""

fig2 = ml.plot_components(result)

#Cross-validation
from prophet.diagnostics import cross_validation, performance_metrics

cv_results = cross_validation(model=ml, initial = pd.to_timedelta(30*20, unit= 'D'), period= pd.to_timedelta(30*5, unit= 'D'),horizon = pd.to_timedelta(30*12, unit= 'D'))

df_p = performance_metrics(cv_results)

df_p

from prophet.plot import plot_cross_validation_metric
fig = plot_cross_validation_metric(cv_results, metric='rmse') #Plots Root Mean Squared Error (RMSE) over different forecast horizons. RMSE measures how much the model's predictions deviate from actual values.

"""The RMSE graph suggests that the model maintains a relatively stable error range (4â€“7) across different forecast horizons, with a slight increase in RMSE for longer-term predictions.The model performs consistently without extreme error variations, indicating good generalization over time."""

fig = plot_cross_validation_metric(cv_results, metric='mae') #Plots Mean Absolute Error (MAE) to measure how far predictions are from actual values. MAE is the average absolute difference between predicted and actual values.

"""This shows that the model is performing well and it shows low prediction error. Thus the model generalizes well to future periods."""